import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import '../App.css'; 

const Profile = () => {
Â  const navigate = useNavigate();
Â  const [user, setUser] = useState(null);
Â  const [name, setName] = useState('');
Â  const [email, setEmail] = useState('');
Â  const [currentPassword, setCurrentPassword] = useState('');
Â  const [newPassword, setNewPassword] = useState('');
Â  const [loading, setLoading] = useState(true);
Â  const [error, setError] = useState(null);
Â  const [success, setSuccess] = useState(null);


Â  useEffect(() => {
Â  Â  const fetchUser = () => {
Â  Â  Â  const userData = localStorage.getItem('user');
Â  Â  Â  const token = localStorage.getItem('token'); 
Â  Â  Â  if (userData && token) {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  const parsedUser = JSON.parse(userData);
Â  Â  Â  Â  Â  setUser(parsedUser);
Â  Â  Â  Â  Â  setName(parsedUser.name || '');
Â  Â  Â  Â  Â  setEmail(parsedUser.email || '');
Â  Â  Â  Â  } catch (e) {
Â  Â  Â  Â  Â  console.error('Failed to parse user data from localStorage', e);
Â  Â  Â  Â  Â  localStorage.clear();
Â  Â  Â  Â  Â  navigate('/login');
Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }
Â  Â  Â  } else {
Â  Â  Â  Â  // If user data or token is missing, redirect immediately
Â  Â  Â  Â  navigate('/login');
Â  Â  Â  Â  return;
Â  Â  Â  }
Â  Â  Â  setLoading(false);
Â  Â  };
Â  Â  fetchUser();
Â  }, [navigate]);
Â  
Â  // This useEffect hook handles the auto-dismissal of success and error messages.
Â  useEffect(() => {
Â  Â  if (success) {
Â  Â  Â  const timer = setTimeout(() => setSuccess(null), 5000);
Â  Â  Â  return () => clearTimeout(timer);
Â  Â  }
Â  Â  if (error) {
Â  Â  Â  const timer = setTimeout(() => setError(null), 5000);
Â  Â  Â  return () => clearTimeout(timer);
Â  Â  }
Â  }, [success, error]);

Â  const handleProfileUpdate = async (e) => {
Â  Â  e.preventDefault();
Â  Â  setLoading(true);
Â  Â  setError(null);
Â  Â  setSuccess(null);
Â  Â  const token = localStorage.getItem('token');

Â  Â  // Final critical check
Â  Â  if (!token || !user || !user._id) {
Â  Â  Â  setError('User data or authentication token not found. Please log in again.');
Â  Â  Â  setLoading(false);
Â  Â  Â  localStorage.clear(); // Clear storage to be safe
Â  Â  Â  navigate('/login');
Â  Â  Â  return;
Â  Â  }

Â  Â  try {
Â  Â  Â  const updateData = {};
Â  Â  Â  if (name !== user.name) updateData.name = name;
Â  Â  Â  if (email !== user.email) updateData.email = email;

Â  Â  Â  // Check if both password fields are filled
Â  Â  Â  if (currentPassword && newPassword) {
Â  Â  Â  Â  updateData.currentPassword = currentPassword;
Â  Â  Â  Â  updateData.newPassword = newPassword;
Â  Â  Â  } else if (currentPassword || newPassword) {
Â  Â  Â  Â  // If only one password field is filled, show an error and stop.
Â  Â  Â  Â  setError('Please provide both current and new passwords to change your password.');
Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  return;
Â  Â  Â  }

Â  Â  Â  if (Object.keys(updateData).length === 0) {
Â  Â  Â  Â  setSuccess('No changes to save.');
Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  return;
Â  Â  Â  }

Â  Â  Â  const response = await axios.put(
Â  Â  Â  Â  `http://localhost:3001/api/auth/update/${user._id}`,
Â  Â  Â  Â  updateData,
Â  Â  Â  Â  { headers: { Authorization: `Bearer ${token}` } }
Â  Â  Â  );

Â  Â  Â  const updatedUser = response.data.user;
Â  Â  Â  const newToken = response.data.token;

Â  Â  Â  // Update localStorage with new data
Â  Â  Â  localStorage.setItem('user', JSON.stringify(updatedUser));
Â  Â  Â  if (newToken) localStorage.setItem('token', newToken);

Â  Â  Â  setUser(updatedUser);
Â  Â  Â  setSuccess('Profile updated successfully! ðŸŽ‰');
Â  Â  Â  setCurrentPassword('');
Â  Â  Â  setNewPassword('');
Â  Â  } catch (err) {
Â  Â  Â  setError(err.response?.data?.message || err.response?.data?.error || err.message || 'Failed to update profile');
Â  Â  Â  if (err.response?.status === 401) {
Â  Â  Â  Â  localStorage.clear();
Â  Â  Â  Â  navigate('/login');
Â  Â  Â  }
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

Â  if (loading) {
Â  Â  return <div className="loading-spinner">Loading profile...</div>;
Â  }

Â  return (
Â  Â  <div className="profile-container">
Â  Â  Â  <header className="profile-header">
Â  Â  Â  Â  <h1>Edit Profile</h1>
Â  Â  Â  Â  <button onClick={() => navigate('/dashboard')} className="btn btn-secondary">
Â  Â  Â  Â  Â  Back to Dashboard
Â  Â  Â  Â  </button>
Â  Â  Â  </header>

Â  Â  Â  <main className="profile-content">
Â  Â  Â  Â  <form onSubmit={handleProfileUpdate} className="profile-form">
Â  Â  Â  Â  Â  <div className="form-group">
Â  Â  Â  Â  Â  Â  <label htmlFor="name">Name</label>
Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  id="name"
Â  Â  Â  Â  Â  Â  Â  value={name}
Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setName(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  className="form-control"
Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <div className="form-group">
Â  Â  Â  Â  Â  Â  <label htmlFor="email">Email</label>
Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  type="email"
Â  Â  Â  Â  Â  Â  Â  id="email"
Â  Â  Â  Â  Â  Â  Â  value={email}
Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setEmail(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  className="form-control"
Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <div className="password-update-section">
Â  Â  Â  Â  Â  Â  <h4 className="section-subtitle">Change Password (optional)</h4>
Â  Â  Â  Â  Â  Â  <div className="form-group">
Â  Â  Â  Â  Â  Â  Â  <label htmlFor="currentPassword">Current Password</label>
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="password"
Â  Â  Â  Â  Â  Â  Â  Â  id="currentPassword"
Â  Â  Â  Â  Â  Â  Â  Â  value={currentPassword}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setCurrentPassword(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  className="form-control"
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div className="form-group">
Â  Â  Â  Â  Â  Â  Â  <label htmlFor="newPassword">New Password</label>
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="password"
Â  Â  Â  Â  Â  Â  Â  Â  id="newPassword"
Â  Â  Â  Â  Â  Â  Â  Â  value={newPassword}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setNewPassword(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  className="form-control"
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  {error && <div className="error-message">{error}</div>}
Â  Â  Â  Â  Â  {success && <div className="success-message">{success}</div>}

Â  Â  Â  Â  Â  <button 
Â  Â  Â  Â  Â  Â  type="submit" 
Â  Â  Â  Â  Â  Â  className="btn btn-primary" 
Â  Â  Â  Â  Â  Â  disabled={loading || !user}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  {loading ? 'Updating...' : 'Save Changes'}
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </form>
Â  Â  Â  </main>
Â  Â  </div>
Â  );
};

export default Profile;